import { useEffect, useRef, useState } from "react";
import { useForm } from "react-hook-form";
import Modal from "../Modal";
import RemoteService from "../../Network/RemoteService";
import "../../App.css";
import usePlacesService from "react-google-autocomplete/lib/usePlacesAutocompleteService";
import { GoogleMap, Marker, useJsApiLoader } from "@react-google-maps/api";
import { ZoomIn, ZoomOut } from "lucide-react";
import { Crosshair } from "lucide-react";
import Select from 'react-select';


function TravelModal({ isOpen, onClose }) {
  const [cities, setCitys] = useState([]);
  const [places, setPlaces] = useState([]);
  const [markerPosition, setMarkerPosition] = useState({
    lat: -12.046374,
    lng: -77.042793,
  });
  const [mapZoom, setMapZoom] = useState(14);
  const [autocompleteBounds, setAutocompleteBounds] = useState(null);
  const GOOGLE_MAPS_API_KEY = "AIzaSyBw-6zoUzaK2C1c39heRnuLb9BIw8Wv4aY";
  const {
    placesService,
    placePredictions,
    getPlacePredictions,
    isPlacePredictionsLoading,
  } = usePlacesService({
    apiKey: GOOGLE_MAPS_API_KEY,
    debounce: 500,
  });

  const { isLoaded } = useJsApiLoader({
    googleMapsApiKey: GOOGLE_MAPS_API_KEY,
    libraries: ["places"],
  });
  const mapRef = useRef(null);

  const hasFetchedCitys = useRef(false);
  const {
    register,
    handleSubmit,
    watch,
    reset,
    setValue,
  } = useForm();
  const cityRegister = register("cityId", { required: "City is required" });
  const selectedCity = watch("cityId");

  // Autosearch passenger by phone when 9 digits entered
  const phone = watch("phone");
  // fetchPassenger function remains here
  useEffect(() => {
    const fetchPassenger = async () => {
      try {
        const filter = encodeURIComponent(`phonePassenger="${phone}"`);
        const { items } = await RemoteService.get(
          `/collections/passenger/records?filter=${filter}`
        );
        if (items.length) {
          const p = items[0];
          setValue("namesPassenger", p.namesPassenger);
          setValue("cityId", p.cityId);
          fetchPlaces(p.id);
        }
      } catch (err) {
        console.error("Error buscando pasajero:", err);
      }
    };
    // fetchPlaces function
    const fetchPlaces = async (passengerId) => {
      try {
        const filter = encodeURIComponent(`idPassenger="${passengerId}"`);
        const { items } = await RemoteService.get(
          `/collections/places_passenger/records?filter=${filter}`
        );
        setPlaces(items);
      } catch (err) {
        console.error("Error loading saved places:", err);
      }
    };
    if (isOpen && /^\d{9}$/.test(phone)) {
      fetchPassenger();
    }
  }, [phone, isOpen]);

  useEffect(() => {
    if (!isOpen) return;
    const fetchCities = async () => {
      try {
        if (!hasFetchedCitys.current) {
          const { items } = await RemoteService.get(
            "/collections/city/records"
          );
          console.log(JSON.stringify(items))
          setCitys(items);
          hasFetchedCitys.current = true;
        }
      } catch (err) {
        alert("Failed to fetch drivers. " + err);
      }
    };
    fetchCities();
  }, [isOpen]);

  const onSubmit = async (data) => {
    const {namesPassenger, phone, } = data
    // Always log submitted data immediately for debugging
    console.log("Form submission data:", data);
    console.table(data);
    try {
      const { plate, model, color, unit, year } = data;
      const vehicleRequest = { plate, model, color, unit, year };
      const response = await RemoteService.post(
        "/collections/vehicle/records",
        vehicleRequest
      );
      reset();
      onClose();
    } catch (err) {
      alert("Failed to submit driver. " + err);
    }
  };

  const handleCitySelect = (e) => {
    const selectedId = e.target.value;
    const city = cities.find((c) => c.id === selectedId);
    if (city) {
      // Swap because `lon` holds latitude and `lat` holds longitude in your city data
      const lat = (city.coordsNorthwest.lon + city.coordsSoutheast.lon) / 2;
      const lng = (city.coordsNorthwest.lat + city.coordsSoutheast.lat) / 2;
      setMarkerPosition({ lat, lng });
      // Compute bounds for autocomplete using correct lat/lon
      const north = Math.max(city.coordsNorthwest.lon, city.coordsSoutheast.lon);
      const south = Math.min(city.coordsNorthwest.lon, city.coordsSoutheast.lon);
      const east = Math.max(city.coordsNorthwest.lat, city.coordsSoutheast.lat);
      const west = Math.min(city.coordsNorthwest.lat, city.coordsSoutheast.lat);
      setAutocompleteBounds({ north, south, east, west });
      // clear address input and predictions
      setValue("originAddress", "");
      getPlacePredictions({ input: "" });
    }
  };
  // When a saved place is selected, set reference, address, and center map
  const handleSavedPlaceSelect = (e) => {
    const selectedAddress = e.target.value;
    const place = places.find((p) => p.address === selectedAddress);
    if (place) {
      // Fill the reference field
      setValue("reference", place.reference || place.address);
      // Set the address in the Buscar Dirección input
      setValue("originAddress", place.address);
      // Center map on the place location
      setMarkerPosition({ lat: place.location.lat, lng: place.location.lon });
      setMapZoom(16);
    }
  };

  // Generate react-select options for saved places
  const placeOptions = places.map((p) => ({
    value: p.address,
    label: (
      
      <div className="text-sm" style={{ whiteSpace: 'pre-wrap' }}>
        {p.address}
        <br />
        <span className="font-bold">Referencia: </span>{p.reference}
</div>
    ),
  }));

  if (!isOpen) return null;

  if (!isLoaded) {
    return <p>Loading map...</p>;
  }

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Crear Viaje">
      <form
        onSubmit={handleSubmit(onSubmit)}
        className="space-y-8 scroll-default  max-h-[85vh] overflow-y-auto custom-scroll"
      >
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
         
            <input
              placeholder="Teléfono"
              id="phone"
              {...register("phone", {
                required: "El teléfono es obligatorio",
                maxLength: { value: 9, message: "Debe tener 9 dígitos" },
                minLength: { value: 9, message: "Debe tener 9 dígitos" },
              })}
              maxLength={9}
              className="block w-full px-4 py-2  bg-white border border-primaryLight rounded-md text-dark focus:ring focus:ring-primary focus:ring-opacity-40  focus:outline-none"
            />
          
          </div>

   <div>
         
            <input
            placeholder="Nombres del pasajero"
              id="namesPassenger"
              {...register("namesPassenger", {
                required: "El nombre es obligatorio",
              })}
              className="block w-full px-4 py-2  bg-white border border-primaryLight rounded-md text-dark focus:ring focus:ring-primary focus:ring-opacity-40  focus:outline-none"
            />
         
          </div>

          <div>
       
            <select
              id="cityId"
              {...cityRegister}
              onChange={(e) => {
                cityRegister.onChange(e);
                handleCitySelect(e);
              }}
              className="block w-full px-4 py-2  bg-white border border-gray-200 rounded-md text-black dark:border-gray-600 focus:ring focus:ring-primary focus:ring-opacity-40  focus:outline-none"
            >
              <option value="">Selecciona ciudad</option>
              {cities.map((city) => (
                <option key={city.id} value={city.id}>
                  {city.nameCity}
                </option>
              ))}
            </select>
         
          </div>
          <div>
            <div>
              <Select
                id="origin"
                className="absolute z-20 max-h-60"
                options={placeOptions}
                onChange={(opt) => {
                  setValue('origin', opt.value);
                  handleSavedPlaceSelect({ target: { value: opt.value } });
                }}
                placeholder="Lugares guardados"
                styles={{
                  container: (provided) => ({
                    ...provided,
                    width: '100%',
                  }),
                  control: (provided) => ({
                    ...provided,
                    width: '100%',
                  }),
                  singleValue: (provided) => ({
                    ...provided,
                    maxLines:1,
                    whiteSpace: 'nowrap',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                  }),
                }}
              />
            </div>
          </div>

          <div>
      
            <input
              id="originAddress"
              {...register("originAddress", { required: "La ciudad  es obligatorio" })}
              className="block w-full px-4 py-2 bg-white border border-primaryLight rounded-md text-dark focus:ring focus:ring-primary focus:ring-opacity-40 focus:outline-none"
              placeholder="Busca una dirección"
              onChange={(e) => {
                if (!selectedCity) {
                  setValue("originAddress",  "")
                  alert("Selecciona una ciudad primero")
                  return;
                }
                getPlacePredictions({ input: e.target.value, bounds: autocompleteBounds });
              }}
            />
            {isPlacePredictionsLoading && <p className="bg-white text-black rounded-md  p-2 text-md">Cargando...</p>}
            <ul className="bg-white absolute z-10 rounded-md max-h-40 overflow-auto mt-1">
              {placePredictions.map((pred) => (
                <li
                  key={pred.place_id}
                  className="px-2 py-1 hover:bg-gray-100 cursor-pointer"
                  onClick={() => {
                    placesService.getDetails(
                      { placeId: pred.place_id },
                      (placeDetails) => {
                        const lat = placeDetails.geometry.location.lat();
                        const lng = placeDetails.geometry.location.lng();
                        setMarkerPosition({ lat, lng });
                        setMapZoom(16);
                        console.log(
                          "Place selected:",
                          placeDetails.formatted_address,
                          "Latitude:",
                          lat,
                          "Longitude:",
                          lng
                        );
                        // set the input value and hide suggestions
                        setValue("originAddress", pred.description + " "  +placeDetails.formatted_address);
                        getPlacePredictions({ input: "" });
                      }
                    );
                  }}
                >
                  {pred.description}
                  
                </li>
              ))}
            </ul>
          
          </div>
             <div>
         
            <input
            placeholder="Referencia"
              id="reference"
              {...register("reference", {
                required: "El nombre es obligatorio",
              })}
              className="block w-full px-4 py-2  bg-white border border-primaryLight rounded-md text-dark focus:ring focus:ring-primary focus:ring-opacity-40  focus:outline-none"
            />
         
          </div>
        </div>




        {/* Interactive Google Map */}
        <div className="relative w-full mb-4">
          <div className="absolute bottom-24 right-2 z-10 flex flex-col space-y-1">
            <button
              type="button"
              onClick={() => setMapZoom(z => Math.min(z + 1, 21))}
              className="bg-white p-2  rounded shadow"
            >
              <ZoomIn size={24} />
            </button>
            <button
              type="button"
              onClick={() => setMapZoom(z => Math.max(z - 1, 0))}
              className="bg-white p-2 rounded shadow"
            >
              <ZoomOut size={24} />
            </button>
          
          </div>
          <div className="absolute top-16 right-2 z-10 flex flex-col space-y-1">

            <button
              type="button"
              onClick={() => {
                if (mapRef.current) mapRef.current.panTo(markerPosition);
                setMapZoom(mapZoom);
              }}
              className="bg-white p-2 rounded shadow"
            >
              <Crosshair size={24} />
            </button>
            </div>
          <GoogleMap
            mapContainerStyle={{ width: "100%", height: "400px" }}
            center={markerPosition}
            zoom={mapZoom}
            options={{
              mapTypeControl: true,
              fullscreenControl: true,
              streetViewControl: false,
              rotateControl: false,
            }}
            onClick={(e) => {
              const lat = e.latLng.lat();
              const lng = e.latLng.lng();
              setMarkerPosition({ lat, lng });
              console.log("Latitude:", lat, "Longitude:", lng);
            }}
            onLoad={(map) => (mapRef.current = map)}
          >
            <Marker
              position={markerPosition}
              draggable={true}
              onDragEnd={(e) => {
                const lat = e.latLng.lat();
                const lng = e.latLng.lng();
                setMarkerPosition({ lat, lng });
                console.log("Latitude:", lat, "Longitude:", lng);
              }}
            />
          </GoogleMap>
        </div>
        <button
          type="submit"
        
          className="w-full py-2 mt-4 text-white bg-primaryLight rounded-lg hover:bg-primaryDark transition-colors duration-200"
        >
          Registrar
        </button>
      </form>
    </Modal>
  );
}

export default TravelModal;
